'use strict';

define([
  'underscore',
  'backbone',
  'backboneNestedModel'
], function(_, Backbone) {

  var EditorComponent = Backbone.Model.extend({

        defaults : {
            /**
             * Name of the component
             * @type {String}
             */
            name               : 'unknown',
            /**
             * Name of category this component
             * belongs to
             * @type {String}
             */
            category           : 'misc',
            /**
             * An autogenerated id for this component
             * base on category and name
             * @type {String}
             */
            componentId        : 'no/id',
            /**
             * A description of what this component does
             * @type {String}
             */
            description        : 'No description',
            /**
             * List of parameters for this component
             * @type {Array}
             */
            parameters         : [],
            /**
             * Any resources refenced by this component is named here
             * @type {Array}
             */
            componentResources : [],
            /**
             * Decides if the component should be executed or taken into account
             * @type {Boolean}
             */
            active             : true,
            /**
             * makes the component mandatory(i.e not removable) once it has 
             * been added. As the entity has no logic itself this is useful
             * for indicating core entity logic like transformation and 
             * entity properties
             * @type {Boolean}
             */
            mandatory         : false
        },  

        initialize: function(options) {
            this.set('componentId', options.category+'/'+options.name);
            this.set('componentResources', []); //Clear the array reference
            this.set('parameters', []); //Clear the parameter reference
            //For each parameter add it
            for (var i = 0; i < options.parameters.length; i++) {
                this.addParameter(options.parameters[i]);
            }
            console.log('Initialize::CreatedComponent {options}', options);
        },
        addParameter: function(param)
        {
            this.get('parameters').push({
                'name'        : param.name,
                'type'        : param.type,
                'description' : param.description
            });
        }

    });

    return EditorComponent;

});
